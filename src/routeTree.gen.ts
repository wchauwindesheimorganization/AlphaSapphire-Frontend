/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TestImport } from './routes/test'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as ProjectsIndexImport } from './routes/projects/index'
import { Route as ProjectsProjectidImport } from './routes/projects/$projectid_'
import { Route as KeyuserUsersImport } from './routes/keyuser/users'
import { Route as KeyuserMandatesImport } from './routes/keyuser/mandates'
import { Route as AdministratorUsersImport } from './routes/administrator/users'
import { Route as AdministratorDepartmentsImport } from './routes/administrator/departments'
import { Route as ProjectsProjectidSubprojectsSubprojectidImport } from './routes/projects/$projectid/subprojects/$subprojectid'

// Create/Update Routes

const TestRoute = TestImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsIndexRoute = ProjectsIndexImport.update({
  id: '/projects/',
  path: '/projects/',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsProjectidRoute = ProjectsProjectidImport.update({
  id: '/projects/$projectid_',
  path: '/projects/$projectid',
  getParentRoute: () => rootRoute,
} as any)

const KeyuserUsersRoute = KeyuserUsersImport.update({
  id: '/keyuser/users',
  path: '/keyuser/users',
  getParentRoute: () => rootRoute,
} as any)

const KeyuserMandatesRoute = KeyuserMandatesImport.update({
  id: '/keyuser/mandates',
  path: '/keyuser/mandates',
  getParentRoute: () => rootRoute,
} as any)

const AdministratorUsersRoute = AdministratorUsersImport.update({
  id: '/administrator/users',
  path: '/administrator/users',
  getParentRoute: () => rootRoute,
} as any)

const AdministratorDepartmentsRoute = AdministratorDepartmentsImport.update({
  id: '/administrator/departments',
  path: '/administrator/departments',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsProjectidSubprojectsSubprojectidRoute =
  ProjectsProjectidSubprojectsSubprojectidImport.update({
    id: '/projects/$projectid/subprojects/$subprojectid',
    path: '/projects/$projectid/subprojects/$subprojectid',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/test': {
      id: '/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestImport
      parentRoute: typeof rootRoute
    }
    '/administrator/departments': {
      id: '/administrator/departments'
      path: '/administrator/departments'
      fullPath: '/administrator/departments'
      preLoaderRoute: typeof AdministratorDepartmentsImport
      parentRoute: typeof rootRoute
    }
    '/administrator/users': {
      id: '/administrator/users'
      path: '/administrator/users'
      fullPath: '/administrator/users'
      preLoaderRoute: typeof AdministratorUsersImport
      parentRoute: typeof rootRoute
    }
    '/keyuser/mandates': {
      id: '/keyuser/mandates'
      path: '/keyuser/mandates'
      fullPath: '/keyuser/mandates'
      preLoaderRoute: typeof KeyuserMandatesImport
      parentRoute: typeof rootRoute
    }
    '/keyuser/users': {
      id: '/keyuser/users'
      path: '/keyuser/users'
      fullPath: '/keyuser/users'
      preLoaderRoute: typeof KeyuserUsersImport
      parentRoute: typeof rootRoute
    }
    '/projects/$projectid_': {
      id: '/projects/$projectid_'
      path: '/projects/$projectid'
      fullPath: '/projects/$projectid'
      preLoaderRoute: typeof ProjectsProjectidImport
      parentRoute: typeof rootRoute
    }
    '/projects/': {
      id: '/projects/'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsIndexImport
      parentRoute: typeof rootRoute
    }
    '/projects/$projectid/subprojects/$subprojectid': {
      id: '/projects/$projectid/subprojects/$subprojectid'
      path: '/projects/$projectid/subprojects/$subprojectid'
      fullPath: '/projects/$projectid/subprojects/$subprojectid'
      preLoaderRoute: typeof ProjectsProjectidSubprojectsSubprojectidImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/test': typeof TestRoute
  '/administrator/departments': typeof AdministratorDepartmentsRoute
  '/administrator/users': typeof AdministratorUsersRoute
  '/keyuser/mandates': typeof KeyuserMandatesRoute
  '/keyuser/users': typeof KeyuserUsersRoute
  '/projects/$projectid': typeof ProjectsProjectidRoute
  '/projects': typeof ProjectsIndexRoute
  '/projects/$projectid/subprojects/$subprojectid': typeof ProjectsProjectidSubprojectsSubprojectidRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/test': typeof TestRoute
  '/administrator/departments': typeof AdministratorDepartmentsRoute
  '/administrator/users': typeof AdministratorUsersRoute
  '/keyuser/mandates': typeof KeyuserMandatesRoute
  '/keyuser/users': typeof KeyuserUsersRoute
  '/projects/$projectid': typeof ProjectsProjectidRoute
  '/projects': typeof ProjectsIndexRoute
  '/projects/$projectid/subprojects/$subprojectid': typeof ProjectsProjectidSubprojectsSubprojectidRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/test': typeof TestRoute
  '/administrator/departments': typeof AdministratorDepartmentsRoute
  '/administrator/users': typeof AdministratorUsersRoute
  '/keyuser/mandates': typeof KeyuserMandatesRoute
  '/keyuser/users': typeof KeyuserUsersRoute
  '/projects/$projectid_': typeof ProjectsProjectidRoute
  '/projects/': typeof ProjectsIndexRoute
  '/projects/$projectid/subprojects/$subprojectid': typeof ProjectsProjectidSubprojectsSubprojectidRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/test'
    | '/administrator/departments'
    | '/administrator/users'
    | '/keyuser/mandates'
    | '/keyuser/users'
    | '/projects/$projectid'
    | '/projects'
    | '/projects/$projectid/subprojects/$subprojectid'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/test'
    | '/administrator/departments'
    | '/administrator/users'
    | '/keyuser/mandates'
    | '/keyuser/users'
    | '/projects/$projectid'
    | '/projects'
    | '/projects/$projectid/subprojects/$subprojectid'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/test'
    | '/administrator/departments'
    | '/administrator/users'
    | '/keyuser/mandates'
    | '/keyuser/users'
    | '/projects/$projectid_'
    | '/projects/'
    | '/projects/$projectid/subprojects/$subprojectid'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  TestRoute: typeof TestRoute
  AdministratorDepartmentsRoute: typeof AdministratorDepartmentsRoute
  AdministratorUsersRoute: typeof AdministratorUsersRoute
  KeyuserMandatesRoute: typeof KeyuserMandatesRoute
  KeyuserUsersRoute: typeof KeyuserUsersRoute
  ProjectsProjectidRoute: typeof ProjectsProjectidRoute
  ProjectsIndexRoute: typeof ProjectsIndexRoute
  ProjectsProjectidSubprojectsSubprojectidRoute: typeof ProjectsProjectidSubprojectsSubprojectidRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  TestRoute: TestRoute,
  AdministratorDepartmentsRoute: AdministratorDepartmentsRoute,
  AdministratorUsersRoute: AdministratorUsersRoute,
  KeyuserMandatesRoute: KeyuserMandatesRoute,
  KeyuserUsersRoute: KeyuserUsersRoute,
  ProjectsProjectidRoute: ProjectsProjectidRoute,
  ProjectsIndexRoute: ProjectsIndexRoute,
  ProjectsProjectidSubprojectsSubprojectidRoute:
    ProjectsProjectidSubprojectsSubprojectidRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/test",
        "/administrator/departments",
        "/administrator/users",
        "/keyuser/mandates",
        "/keyuser/users",
        "/projects/$projectid_",
        "/projects/",
        "/projects/$projectid/subprojects/$subprojectid"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/test": {
      "filePath": "test.tsx"
    },
    "/administrator/departments": {
      "filePath": "administrator/departments.tsx"
    },
    "/administrator/users": {
      "filePath": "administrator/users.tsx"
    },
    "/keyuser/mandates": {
      "filePath": "keyuser/mandates.tsx"
    },
    "/keyuser/users": {
      "filePath": "keyuser/users.tsx"
    },
    "/projects/$projectid_": {
      "filePath": "projects/$projectid_.tsx"
    },
    "/projects/": {
      "filePath": "projects/index.tsx"
    },
    "/projects/$projectid/subprojects/$subprojectid": {
      "filePath": "projects/$projectid/subprojects/$subprojectid.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
