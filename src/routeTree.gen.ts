/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as KeyuserUsersImport } from './routes/keyuser/users'
import { Route as KeyuserMandatesImport } from './routes/keyuser/mandates'
import { Route as AdministratorUsersImport } from './routes/administrator/users'
import { Route as AdministratorDepartmentsImport } from './routes/administrator/departments'

// Create/Update Routes

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const KeyuserUsersRoute = KeyuserUsersImport.update({
  id: '/keyuser/users',
  path: '/keyuser/users',
  getParentRoute: () => rootRoute,
} as any)

const KeyuserMandatesRoute = KeyuserMandatesImport.update({
  id: '/keyuser/mandates',
  path: '/keyuser/mandates',
  getParentRoute: () => rootRoute,
} as any)

const AdministratorUsersRoute = AdministratorUsersImport.update({
  id: '/administrator/users',
  path: '/administrator/users',
  getParentRoute: () => rootRoute,
} as any)

const AdministratorDepartmentsRoute = AdministratorDepartmentsImport.update({
  id: '/administrator/departments',
  path: '/administrator/departments',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/administrator/departments': {
      id: '/administrator/departments'
      path: '/administrator/departments'
      fullPath: '/administrator/departments'
      preLoaderRoute: typeof AdministratorDepartmentsImport
      parentRoute: typeof rootRoute
    }
    '/administrator/users': {
      id: '/administrator/users'
      path: '/administrator/users'
      fullPath: '/administrator/users'
      preLoaderRoute: typeof AdministratorUsersImport
      parentRoute: typeof rootRoute
    }
    '/keyuser/mandates': {
      id: '/keyuser/mandates'
      path: '/keyuser/mandates'
      fullPath: '/keyuser/mandates'
      preLoaderRoute: typeof KeyuserMandatesImport
      parentRoute: typeof rootRoute
    }
    '/keyuser/users': {
      id: '/keyuser/users'
      path: '/keyuser/users'
      fullPath: '/keyuser/users'
      preLoaderRoute: typeof KeyuserUsersImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/administrator/departments': typeof AdministratorDepartmentsRoute
  '/administrator/users': typeof AdministratorUsersRoute
  '/keyuser/mandates': typeof KeyuserMandatesRoute
  '/keyuser/users': typeof KeyuserUsersRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/administrator/departments': typeof AdministratorDepartmentsRoute
  '/administrator/users': typeof AdministratorUsersRoute
  '/keyuser/mandates': typeof KeyuserMandatesRoute
  '/keyuser/users': typeof KeyuserUsersRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/administrator/departments': typeof AdministratorDepartmentsRoute
  '/administrator/users': typeof AdministratorUsersRoute
  '/keyuser/mandates': typeof KeyuserMandatesRoute
  '/keyuser/users': typeof KeyuserUsersRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/administrator/departments'
    | '/administrator/users'
    | '/keyuser/mandates'
    | '/keyuser/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/administrator/departments'
    | '/administrator/users'
    | '/keyuser/mandates'
    | '/keyuser/users'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/administrator/departments'
    | '/administrator/users'
    | '/keyuser/mandates'
    | '/keyuser/users'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  AdministratorDepartmentsRoute: typeof AdministratorDepartmentsRoute
  AdministratorUsersRoute: typeof AdministratorUsersRoute
  KeyuserMandatesRoute: typeof KeyuserMandatesRoute
  KeyuserUsersRoute: typeof KeyuserUsersRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  AdministratorDepartmentsRoute: AdministratorDepartmentsRoute,
  AdministratorUsersRoute: AdministratorUsersRoute,
  KeyuserMandatesRoute: KeyuserMandatesRoute,
  KeyuserUsersRoute: KeyuserUsersRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/administrator/departments",
        "/administrator/users",
        "/keyuser/mandates",
        "/keyuser/users"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/administrator/departments": {
      "filePath": "administrator/departments.tsx"
    },
    "/administrator/users": {
      "filePath": "administrator/users.tsx"
    },
    "/keyuser/mandates": {
      "filePath": "keyuser/mandates.tsx"
    },
    "/keyuser/users": {
      "filePath": "keyuser/users.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
